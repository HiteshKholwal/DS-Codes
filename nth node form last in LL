#include <iostream>

class Node {
public:
    int data;
    Node* next;

    Node(int val) : data(val), next(nullptr) {}
};

class LinkedList {
public:
    Node* head;

    LinkedList() : head(nullptr) {}

    void append(int val) {
        Node* newNode = new Node(val);
        if (head == nullptr) {
            head = newNode;
        } else {
            Node* temp = head;
            while (temp->next != nullptr) {
                temp = temp->next;
            }
            temp->next = newNode;
        }
    }

    Node* nthNodeFromEnd(int n) {
        if (head == nullptr || n <= 0) {
            return nullptr;
        }

        Node* firstPtr = head;
        Node* secondPtr = head;

        for (int i = 0; i < n; ++i) {
            if (secondPtr == nullptr) {
                // The list is not long enough
                return nullptr;
            }
            secondPtr = secondPtr->next;
        }

        while (secondPtr != nullptr) {
            firstPtr = firstPtr->next;
            secondPtr = secondPtr->next;
        }

        return firstPtr;
    }

    ~LinkedList() {
        Node* temp;
        while (head != nullptr) {
            temp = head;
            head = head->next;
            delete temp;
        }
    }
};

int main() {
    LinkedList myList;

    myList.append(1);
    myList.append(2);
    myList.append(3);
    myList.append(4);
    myList.append(5);

    int n = 2; // Find the 2nd node from the end

    Node* result = myList.nthNodeFromEnd(n);

    if (result != nullptr) {
        std::cout << "The " << n << "nd node from the end is: " << result->data << std::endl;
    } else {
        std::cout << "Invalid input or the list is not long enough." << std::endl;
    }

    return 0;
}
